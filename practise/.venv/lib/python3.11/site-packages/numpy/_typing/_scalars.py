<<<<<<< HEAD:practise/.venv/lib/python3.11/site-packages/numpy/_typing/_scalars.py
from typing import Union, Any
=======
from typing import Any, TypeAlias
>>>>>>> origin:practise/env/Lib/site-packages/numpy/_typing/_scalars.py

import numpy as np

# NOTE: `_StrLike_co` and `_BytesLike_co` are pointless, as `np.str_` and
# `np.bytes_` are already subclasses of their builtin counterpart

<<<<<<< HEAD:practise/.venv/lib/python3.11/site-packages/numpy/_typing/_scalars.py
_CharLike_co = Union[str, bytes]

# The 6 `<X>Like_co` type-aliases below represent all scalars that can be
# coerced into `<X>` (with the casting rule `same_kind`)
_BoolLike_co = Union[bool, np.bool]
_UIntLike_co = Union[_BoolLike_co, np.unsignedinteger[Any]]
_IntLike_co = Union[_BoolLike_co, int, np.integer[Any]]
_FloatLike_co = Union[_IntLike_co, float, np.floating[Any]]
_ComplexLike_co = Union[_FloatLike_co, complex, np.complexfloating[Any, Any]]
_TD64Like_co = Union[_IntLike_co, np.timedelta64]

_NumberLike_co = Union[int, float, complex, np.number[Any], np.bool]
_ScalarLike_co = Union[
    int,
    float,
    complex,
    str,
    bytes,
    np.generic,
]

# `_VoidLike_co` is technically not a scalar, but it's close enough
_VoidLike_co = Union[tuple[Any, ...], np.void]
=======
_CharLike_co: TypeAlias = str | bytes

# The 6 `<X>Like_co` type-aliases below represent all scalars that can be
# coerced into `<X>` (with the casting rule `same_kind`)
_BoolLike_co: TypeAlias = bool | np.bool
_UIntLike_co: TypeAlias = np.unsignedinteger[Any] | _BoolLike_co
_IntLike_co: TypeAlias = int | np.integer[Any] | _BoolLike_co
_FloatLike_co: TypeAlias = float | np.floating[Any] | _IntLike_co
_ComplexLike_co: TypeAlias = (
    complex
    | np.complexfloating[Any, Any]
    | _FloatLike_co
)
_TD64Like_co: TypeAlias = np.timedelta64 | _IntLike_co

_NumberLike_co: TypeAlias = int | float | complex | np.number[Any] | np.bool
_ScalarLike_co: TypeAlias = int | float | complex | str | bytes | np.generic

# `_VoidLike_co` is technically not a scalar, but it's close enough
_VoidLike_co: TypeAlias = tuple[Any, ...] | np.void
>>>>>>> origin:practise/env/Lib/site-packages/numpy/_typing/_scalars.py
